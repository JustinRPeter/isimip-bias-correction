#!/bin/bash

#PBS -q normal
#PBS -l storage=gdata/er4+scratch/er4
#PBS -P er4
#PBS -N job_data_prep
#PBS -l walltime=1:00:00
#PBS -l ncpus=16
#PBS -l mem=64gb

# Usage
# Set var, model, rcp, output_dir_base, then submit the job.
# Input files will be set to known locations based on model.
# Depending on which project folder to read from, modify storage flags (-l PBS option) 
# as necessary. The flags are not added by default because a given user may only
# have access to a subset of projects, and/or only want to process a subset of models
var=pr
model=ACCESS1-0
rcp=historical
output_dir_base=/scratch/er4/vd5822/isimip-prep



# Fail on first error
set -e

# Load required modules
module load cdo/1.7.2

# Determine period
case ${rcp} in
historical)
    start_date=19600101
    end_date=20051231
    ;;
rcp45)
    start_date=20060101
    end_date=20991231
    ;;
rcp85)
    start_date=20060101
    end_date=20991231
    ;;
*)
    echo "Unsupported rcp ${rcp}"
    exit 1
    ;;
esac

# Determine input path
case ${model} in
ACCESS1-0)
    echo "Not yet supported"
    exit 1
    ;;
CNRM-CM5)
    echo "Not yet supported"
    exit 1
    ;;
GFDL-ESM2M)
    echo "Not yet supported"
    exit 1
    ;;
MIROC5)
    echo "Not yet supported"
    exit 1
    ;;
CCAM-r3355-ACCESS1-0|CCAM-r3355-CNRM-CM5|CCAM-r3355-GFDL-ESM2M|CCAM-r3355-MIROC5)
    case ${model} in
    CCAM-r3355-ACCESS1-0)
        institute_gcm=CSIRO-BOM-ACCESS1-0;;
    CCAM-r3355-CNRM-CM5)
        institute_gcm=CNRM-CERFACS-CNRM-CM5;;
    CCAM-r3355-GFDL-ESM2M)
        institute_gcm=NOAA-GFDL-GFDL-ESM2M;;
    CCAM-r3355-MIROC5)
        institute_gcm=MIROC-MIROC5;;
    *)
        echo "Couldn't determine institute/gcm for model ${model}"
        exit 1
        ;;
    esac

    case ${rcp} in
    rcp45)
        ccam_drs_subfolder=DELWP;;
    historical|rcp85)
        ccam_drs_subfolder=WINE;;
    *)
        echo "Couldn't determine ccam_drs_subfolder for CCAM-r3355 model ${model} for rcp ${rcp}"
        exit 1
        ;;
    esac

    input_dir=/scratch/e53/DRS/${ccam_drs_subfolder}/output/AUS-50/CSIRO/${institute_gcm}/${rcp}/r1i1p1/CSIRO-CCAM-r3355/v1/day/${var}
    source_filename_base=${var}_AUS-50_${institute_gcm}_${rcp}_r1i1p1_CSIRO-CCAM-r3355_v1_day_
    ;;
WRF360J-ACCESS1-0)
    input_dir=/g/data/at43/output/AUS-44i/UNSW/CSIRO-BOM-ACCESS1-0/${rcp}/r1i1p1/UNSW-WRF360J/v1/day/${var}/latest
    source_filename_base=${var}_AUS-44i_CSIRO-BOM-ACCESS1-0_${rcp}_r1i1p1_UNSW-WRF360J_v1_day_
    ;;
WRF360K-ACCESS1-0)
    input_dir=/g/data/at43/output/AUS-44i/UNSW/CSIRO-BOM-ACCESS1-0/${rcp}/r1i1p1/UNSW-WRF360K/v1/day/${var}/latest
    source_filename_base=${var}_AUS-44i_CSIRO-BOM-ACCESS1-0_${rcp}_r1i1p1_UNSW-WRF360K_v1_day_
    ;;
*)
    echo "Unsupported model ${model}"
    exit 1
    ;;
esac

output_filename_base=${var}_day_${model}_${rcp}_r1i1p1_
output_dir=${output_dir_base}/${model}
temp_dir=${output_dir}/temp_${var}${rcp}

echo "Variable: ${var}"
echo "Model: ${model}"
echo "rcp: ${rcp}"
echo "Period: ${start_date}-${end_date}"
echo "Input dir: ${input_dir}"
echo "Output dir: ${output_dir}"
echo "Temp dir: ${temp_dir}"
echo ""

echo "Looking for files that overlap time period ${start_date}-${end_date}"
echo "Found:"

# Get all files that match the source input pattern, not including year.
found_input_files=($(ls ${input_dir}/${source_filename_base}*))

# Loop through the found files to find the ones with overlapping time period we want
filelist=''
for found_file in "${found_input_files[@]}"; do
    found_file_basename=$(basename $found_file)
    date=$(echo $found_file_basename | grep -Eo '[[:digit:]]{4}[[:digit:]]{2}[[:digit:]]{2}')
    date_arr=($date)
    file_start_date=${date_arr[0]}
    file_end_date=${date_arr[1]}

    # Include if file start date is less than start date
    # arg and file end date is greater than start date arg.
    # File ----|----|------------------------------------
    # Arg  -------|--------------|-----------------------
    if [ $file_start_date -le $start_date ] && [ $start_date -le $file_end_date ]; then
        echo "$found_file"
        filelist="$filelist $found_file"
        continue
    fi

    # Include if file start date is after start date arg
    # and file end date is before end date arg.
    # File ---------|----|-------------------------------
    # Arg  -------|--------------|-----------------------
    if [ $start_date -le $file_start_date ] && [ $file_end_date -le $end_date ]; then
        echo "$found_file"
        filelist="$filelist $found_file"
        continue
    fi

    # Include if file start date is after start date arg
    # and file start date is before end date arg.
    # File -------------------|----|---------------------
    # Arg  -------|--------------|-----------------------
    if [ $file_start_date -ge $start_date ] && [ $file_start_date -le $end_date ]; then
        echo "$found_file"
        filelist="$filelist $found_file"
        continue
    fi
done

# Exit if no files were found
filelist_array=(${filelist})
if [ ${#filelist_array[@]} -eq 0 ]; then
    echo "Error: Did not find any files that overlap time period"
    exit 1
fi

# Generate output and temp folders
mkdir -p ${output_dir}
mkdir -p ${temp_dir}

temp_merged_file=${temp_dir}/tmp_${source_filename_base}merged.nc
output_file=${output_dir}/${output_filename_base}${start_date}-${end_date}.nc

echo ""
echo "Merging all found files overlapping time period into temp file ${temp_merged_file}"
cdo -f nc4c -z zip_9 -mergetime ${filelist} ${temp_merged_file}
wait

echo "Extracting desired time period from ${temp_merged_file} and creating output file ${output_file}"
cdo -f nc4c -z zip_9 -seldate,${start_date},${end_date} ${temp_merged_file} ${output_file}
wait

echo "Cleaning up temp files"
rm -rf ${temp_dir}

echo "Job Completed"